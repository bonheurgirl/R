panel.xyplot(x,y,...)##first call the default panel function for xyplot
panel.lmline(x,y, col=2) ##overlay a simple regression line
})
library(hexbin)
x <- rnorm(1000)
y <- rnorm(1000)
bin<-hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning")
piq <- read.csv("~/Documents/R/piq.csv")
View(piq)
fit <- lm(y ~ x1 + x2 + x3, data=piq)
fit <- lm(y ~ "Brain" + "Height" + "Weight", data=piq)
fit <- lm("PIQ" ~ "Brain" + "Height" + "Weight", data=piq)
fit <- lm(PIQ ~ Brain + Height + Weight, data=piq)
summary(fit) # show results
pairs(~PIQ+Brain+Height+Weight,data=piq,
main=" Scatterplot Matrix")
?attach
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(~PIQ+Brain+Height+Weight,data=piq, main="3D Scatterplot")
Scatterplot Matrix
library(scatterplot3d)
scatterplot3d(PIQ,Brain,Height,Weight,data=piq, main="3D Scatterplot")
attach(piq)
scatterplot3d(PIQ,Brain,Height,Weight,data=piq, main="3D Scatterplot")
library(scatterplot3d)
attach(piq)
scatterplot3d(PIQ,Brain,Height,Weight, main="3D Scatterplot")
plot3d(PIQ,Brain,Height,Weight, main="Spinning Scatterplot")
library(rgl)
plot3d(PIQ,Brain,Height,Weight, main="Spinning Scatterplot")
library(rgl)
plot3d(PIQ,Brain,Height,Weight)
bloodpress <- read.delim("~/Documents/R/bloodpress.txt")
View(bloodpress)
?corr
?cor
vars <-c("Top10_13", "Rides13")
cor(new_bull[,vars])
cor(bloodpress)
bloodpress$Pt = NULL
cor(bloodpress)
str(bloodpress)
attach(bloodpress)
scatterplot3d(BP,Age,Weight,BSA, Dur, Pulse,Stress, main="Bloodpressure")
library(scatterplot3d)
attach(bloodpress)
scatterplot3d(BP,Age,Weight,BSA, Dur, Pulse,Stress, main="Bloodpressure")
scatterplot3d(BP,Age,Weight,Stress, main="Bloodpressure")
str(bloodpress)
fit <- lm(BP ~ Age + Weight + Stress, data=bloodpress)
summary(fit) # show results
library(lattice)
pairs(~BP+Age+Weight+Weight,Stress=bloodpress,
main=" Scatterplot Matrix BP")
IQR(bloodpress$Weight)
iqr(bloodpress)
IQR(bloodpress)
?IQR
hist(bloodpress$Weight)
mean(bloodpress$Weight)
library(lattice)
pairs(~BP+Age+Weight+Weight,Stress=bloodpress,
main=" Scatterplot Matrix BP")
hist(bloodpress$Weight)
mean(bloodpress$Weight)
sd(bloodpress)
library(lattice)
pairs(~BP+Age+Weight+Weight,Stress=bloodpress,
main=" Scatterplot Matrix BP")
hist(bloodpress$Weight)
mean(bloodpress$Weight)
sd(bloodpress$Weight)
SontData <- read.csv("~/Documents/R/SontData.csv")
View(SontData)
SontData <- read.csv("~/Documents/R/SontData.csv")
View(SontData)
sont<-read.csv("SontData.csv")
str(sont)
sont$last_payment_date = as.Date(sont$last_payment_date, "%Y-%m-%d")
sont$year_of_purchase = as.numeric(format(sont$last_payment_date, "%Y"))
sont$days_since= as.numeric(difftime(time1 = "2016-09-01",
time2 = sont$last_payment_date, units = "days"))
str(sont)
summary(sont)
head(sont)
library(sqldf)
customers_2015 = sqldf("SELECT accountID,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
num_of_pymt AS 'frequency',
avg_pymt_amount AS 'amount'
FROM sont GROUP BY 1")
head(customers_2015)
hist(customers_2015$recency)
hist(customers_2015$frequency)
hist(customers_2015$amount)
hist(customers_2015$amount, breaks = 100)
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
customers_2015$segment = ifelse(test = customers_2015$recency > 365*3, yes = "inactive", no = "NA")
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# A more complex 3-segment solution based on recency alone
customers_2015$segment = ifelse(test = customers_2015$recency > 365*3,
yes = "inactive",
no = ifelse(test = customers_2015$recency > 365*2,
yes = "cold",
no = "NA"))
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
sont<-read.csv("SontData.csv")
str(sont)
sont$last_payment_date = as.Date(sont$last_payment_date, "%Y-%m-%d")
sont$days_since= as.numeric(difftime(time1 = "2016-09-01",
time2 = sont$last_payment_date, units                         = "days"))
str(sont)
library(sqldf)
head(sont)
customers = sqldf("SELECT accountID,
MIN(days_since) AS 'recency',
num_of_pymt AS 'frequency',
avg_pymt_amount AS 'amount'
FROM sont GROUP BY 1")
head(customers)
summary(customers)
hist(customers$recency)
hist(customers$frequency)
hist(customers$amount)
hist(customers$amount, breaks = 100)
hist(customers$amount, breaks = 200)
new_data = customers
head(new_data)
row.names(new_data) = new_data$accountID
new_data$accountID = NULL
head(new_data)
new_data$amount = log(new_data$amount)
hist(new_data$amount)
new_data = scale(new_data)
head(new_data)
d = dist(new_data)
c = hclust(d, method="ward.D2")
plot(c)
members = cutree(c, k = 9)
members[1:30]
table(members)
aggData<-aggregate(new_data[c("recency","frequency","amount")], by=list(members), FUN=mean)
#aggregate(new_data[, 2:4], by = list(members), mean)
aggregate(new_data[, 2:4], by=list(members), FUN=mean)
#aggregate(new_data[, 2:4], by = list(members), mean)
aggregate(new_data[, 2:4], by=list(members), mean)
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
#
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Add headers and interpret the last column as a date, extract year of purchase
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
data$days_since       = as.numeric(difftime(time1 = "2016-01-01",
time2 = data$date_of_purchase,
units = "days"))
# Display the data after transformation
head(data)
summary(data)
# Compute key marketing indicators using SQL language
library(sqldf)
# Compute recency, frequency, and average purchase amount
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
# Explore the data
head(customers_2015)
summary(customers_2015)
hist(customers_2015$recency)
hist(customers_2015$frequency)
hist(customers_2015$amount)
hist(customers_2015$amount, breaks = 100)
# --- CODING A MANAGERIAL SEGMENTATION ---------------------
#example if statement
x <- 5
if(x > 0){
print("Positive number")
}
x <- 0
if(x > 0){
print("Positive number")
}
#example if else statement
x <- -5
if(x > 0){
print("Non-negative number")
} else {
print("Negative number")
}
#as one line of code
if(x > 0) print("Non-negative number") else print("Negative number")
# Simple 2-segment solution based on recency alone
customers_2015$segment = ifelse(test = customers_2015$recency > 365*3, yes = "inactive", no = "NA")
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# A more complex 3-segment solution based on recency alone
customers_2015$segment = ifelse(test = customers_2015$recency > 365*3,
yes = "inactive",
no = ifelse(test = customers_2015$recency > 365*2,
yes = "cold",
no = "NA"))
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# Simple 2-segment solution using the which statement
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# More complex 4-segment solution using which
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# Complete segment solution using which, and exploiting previous test as input
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$first_purchase <= 365*2)] = "new warm"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount < 100)] = "warm low value"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount >= 100)] = "warm high value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$first_purchase <= 365)] = "new active"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount < 100)] = "active low value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount >= 100)] = "active high value"
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# Re-order factor in a way that makes sense
customers_2015$segment = factor(x = customers_2015$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
table(customers_2015$segment)
aggregate(x = customers_2015[, 2:5], by = list(customers_2015$segment), mean)
# --- SEGMENTING A DATABASE RETROSPECTIVELY ----------------
# Compute key marketing indicators using SQL language
library(sqldf)
# Compute recency, frequency, and average purchase amount
customers_2014 = sqldf("SELECT customer_id,
MIN(days_since) - 365 AS 'recency',
MAX(days_since) - 365 AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data
WHERE days_since > 365
GROUP BY 1")
# Complete segment solution using which, and exploiting previous test as input
customers_2014$segment = "NA"
customers_2014$segment[which(customers_2014$recency > 365*3)] = "inactive"
customers_2014$segment[which(customers_2014$recency <= 365*3 & customers_2014$recency > 365*2)] = "cold"
customers_2014$segment[which(customers_2014$recency <= 365*2 & customers_2014$recency > 365*1)] = "warm"
customers_2014$segment[which(customers_2014$recency <= 365)] = "active"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$first_purchase <= 365*2)] = "new warm"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount < 100)] = "warm low value"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount >= 100)] = "warm high value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$first_purchase <= 365)] = "new active"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount < 100)] = "active low value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount >= 100)] = "active high value"
# Re-order factor in a way that makes sense
customers_2014$segment = factor(x = customers_2014$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# Show segmentation results
table(customers_2014$segment)
pie(table(customers_2014$segment), col = rainbow(24))
aggregate(x = customers_2014[, 2:5], by = list(customers_2014$segment), mean)
# --- COMPUTING REVENUE GENERATION PER SEGMENT -------------
# Compute how much revenue is generated by segments
# Notice that people with no revenue in 2015 do NOT appear
revenue_2015 = sqldf("SELECT customer_id, SUM(purchase_amount) AS 'revenue_2015'
FROM data
WHERE year_of_purchase = 2015
GROUP BY 1")
summary(revenue_2015)
# Merge 2015 customers and 2015 revenue (the wrong way)
actual = merge(customers_2015, revenue_2015)
# Merge 2015 customers and 2015 revenue (correct)
actual = merge(customers_2015, revenue_2015, all.x = TRUE)
actual$revenue_2015[is.na(actual$revenue_2015)] = 0
# Show average revenue per customer and per segment
aggregate(x = actual$revenue_2015, by = list(customers_2015$segment), mean)
# Merge 2014 customers and 2015 revenue (correct)
forward = merge(customers_2014, revenue_2015, all.x = TRUE)
forward$revenue_2015[is.na(forward$revenue_2015)] = 0
# Show average revenue per customer and per segment
r = aggregate(x = forward$revenue_2015, by = list(customers_2014$segment), mean)
print(r)
# Re-order and display results
r = r[order(r$x, decreasing = TRUE), ]
print(r)
barplot(r$x, names.arg = r$Group.1)
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
View(data)
library(RColorBrewer)
data("VADeaths")
par(mfrow=c(2,3))
hist(VADeaths, breaks = 10, col=brewer.pal(3,"Set3"), main = "Set3 3 colors")
?par
?mfrow
?set.seed
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean = rep(1:3, each =4), sd=.2)
y<-rnorm(12, mean= rep(c(1,2,1), each = 4), sd=.2)
plot(x,y, col="blue", pch = 19, cex=2)
text(x + 0.05, y + 0.05, labels=as.character(1:12)
dataFrame<-data.frame(x=x, y=y)
dist(dataFrame)
getwd()
hist(VADeaths, breaks = 20, col=brewer.pal(2,"Set2"), main = "Set2")
hist(VADeaths, breaks = 10, col=brewer.pal(2,"Set2"), main = "Set2")
hist(VADeaths, breaks = 30, col=brewer.pal(2,"Set2"), main = "Set2")
hist(VADeaths, breaks = 5, col=brewer.pal(2,"Set2"), main = "Set2")
hist(VADeaths, breaks = 1, col=brewer.pal(2,"Set2"), main = "Set2")
hist(VADeaths, col=brewer.pal(2,"Set2"), main = "Set2")
histinfo<-hist(BMI)
histinfo
histinfo<-hist(BMI)
?BMI
BMI<-rnorm(n=1000, m=24.2, sd=2.2)
?rnorm
acl<-read.csv("AustinCityLimits.csv")
names(acl)
over30<- acl[ which(acl$Age >=30), ]
older <-acl[acl$Age>=30,]
View(older)
View(over30)
genre<-table(over30$Genre)
genre
gender<-table(over30$Gender)
gender
twoway <- table(over30$Gender,over30$Genre)
twoway
addmargins(twoway)
barplot(twoway, legend=T, beside=T, col = c( "pink", "blue"), main = "Austin City Limits Music Genre by Gender")
genre
prop.table(genre)
prop.table(twoway,1)
?round(25/61, digits = 4)
round(25/61, digits = 4)
pop<-table(acl$Facebook.100k)
pop
age<-table(acl$Facebook.100k, acl$Age.Group)
age
males<-acl[ which(acl$Gender=="M"), ]
grammy<-table(males$Grammy)
grammy
gg<-table(males$Grammy, males$Genre)
gg
genre<-table(males$Genre)
barplot(gg, legend=T, beside=T, main = "How many artists in each genre won grammys", col = c("red", "blue"))
prop.table(grammy)
grammy
prop.table(grammy)
returning_users_data <- read.csv("~/Documents/R/returning_users_data.csv")
View(returning_users_data)
View(acl)
library(swirl)
swirl()
wd()
?setwd
getwd()
my.tab<-matrix(c(16,19,40,29,17,21,36,23,32,24,54,39), nc=4)
View(my.tab)
my.tab
View(my.tab)
my.tab<-matrix(c(16,19,40,29,17,21,36,23,32,24,54,39), nc=3)
my.tab
chisq.test(my.tab)
?datasets
library(help = "datasets")
fit <-lm(weight ~ height, data=women)
summary(fit)
fit
xyplot(fit)
attach(women)
summary(wommen)
library(help = "datasets")
plot(height, weight, main="Scatterplot")
?plot
abline(lm(height~wt), col="red") # regression line (y~x)
abline(lm(height~weight), col="red") # regression line (y~x)
abline(lm(weight~height), col="red") # regression line (y~x)
?lm
fit<-lm(formula,data)
fit <-lm(weight ~ height, data=women)
summary(fit)
summary(fit)$r.squared
summary(fit)
x<-c(2,2,3,5,6,7,9,14,15,18)
y<-c(2,2,3,5,6,8,9,14,15,18)
cor(x,y)
cor(height,weight)
?attach
mytable<-table(x,y)#x will be rows, y will be columns
margin.table(mytable,1)# x frequencies, summed over y
margin.table(mytable,2) #y frequencies, summed over x
prop.table(mytable) # cell percentages
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
green<-c(2,3,5,6,10)
red<-c(6,9,15,18)
color<-table(green,red)
green<-c(2,3,5,6)
red<-c(6,9,15,18)
color<-table(green,red)
prop.table(color)
prop.table(color,2)
Adwords...Sheet1 <- read.csv("~/Documents/R/Adwords - Sheet1.csv")
View(Adwords...Sheet1)
csv<-View(Adwords...Sheet1)
data=View(Adwords...Sheet1)
sep=",")
mydata <- read.table("Adwords.csv", header=TRUE,
)
mydata <- read.table("Adwords.csv", header=TRUE,
sep=",",row.names='id')
)
Adwords <- read.csv("~/Documents/R/Adwords.csv", header=FALSE)
View(Adwords)
str(Adwords)
View(Adwords)
View(Adwords...Sheet1)
hist(Adwords...Sheet1$X1.11.)
countries <- read.csv("~/Documents/R/countries.csv", sep="")
View(countries)
library(dplyr)
count(countries, Countries)
x<-as.vector(countries$Countries)
n_distinct(x)
countries <- read.csv("~/Documents/R/countries.csv", sep="")
View(countries)
countries <- read.csv("~/Documents/R/countries.csv", sep=",")
View(countries)
count(countries, Countries)
x<-as.vector(countries$Countries)
n_distinct(x)
x
?datasets
library(help = "datasets")
library(Titanic)
Titanic
titianic<-Titanic
titanic<-as.data.frame(Titanic)
sapply(titanic,function(x) sum(is.na(x)))
sapply(titanic, function(x) length(unique(x)))
View(titanic)
library(Amelia)
install.packages(Amelia)
View(titanic)
survivors <- titanic[ which(titanic$Survived=='Yes'),]
str(survivors)
nonsurvivors <- titanic[ which(titanic$Survived=='No'),]
countries <- read.csv("~/Documents/R/countries.csv", sep=",")
library(dplyr)
count(countries, Countries)
x<-as.vector(countries$Countries)
n_distinct(x)
wd()
getwd()
setwd("/Users/anitaowens/Documents/R/data")
getwd()
restData<-read.csv("./data/restaurants.csv")
restData<-read.csv("/Users/anitaowens/Documents/R/data/restaurants.csv")
head(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm=TRUE)
quantile(restData$councilDistrict,probs = c(.5,.75,.9))
table(restData$zipCode,useNA = "ifany")
table1=table(restData$zipCode,useNA = "ifany")
table(restData$councilDistrict,restData$zipCode)
library(jsonlite)
data <- fromJSON("https://data.baltimorecity.gov/resource/aqgr-xx9h.json")
a
raw.data <- readLines(fileUrl, warn = "F")
rd <- fromJSON(raw.data)
write.csv(data, file="MyData.csv")
unlink("MyData.csv")
write.table(data, file = 'data.txt', sep='/t')
library(xlsx)
write.xlsx(data, file, sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE)
write.csv(data, file = "yellow.csv")
library(RJSONIO)
starwars<-fromJSON("https://public.tableau.com/s/sites/default/files/media/starwarscharacterdata.json")
as.data.frame(starwars)
starwars2<-as.data.frame(starwars)
View(starwars2)
do.call(rbind, lapply(starwars, data.frame, stringsAsFactors=FALSE))
str(do.call(rbind, lapply(starwars, data.frame, stringsAsFactors=FALSE)))
data=str(do.call(rbind, lapply(starwars, data.frame, stringsAsFactors=FALSE)))
library(plyr)
ldply(starwars,data.frame)
