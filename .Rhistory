74-13
61/sqrt(36)
13/sqrt(36)
77-73
round(4/sd(77), digits = 2)
round(4/13, digits = 2)
hist(survey$happy)
fivenum(survey$happy)
mean(survey$happy)
sd(survey$happy)
round(sd(survey$happy), digits = 1)
happy5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =5)
happy5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy5)
sd(happy5)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(5)
hist(survey$happy)
#n=15
happy15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =15)
happy15[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy15)
# Calculate the mean and sd of the sampling distribution.
mean(happy15)
sd(happy15)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(15)
mean(happy5)
mean(happy15)
mean(happy25)
#n=25
happy25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =25)
happy25[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy25)
# Calculate the mean and sd of the sampling distribution.
mean(happy25)
sd(happy25)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(25)
mean(happy5)
mean(happy15)
mean(happy25)
sd(happy5)
sd(happy15)
sd(happy25)
par(mfrow=c(1,3))
hist(happy5)
hist(happy15)
hist(happy25)
dp<-density(happy5)
plot(dp, main="Happy5")
polygon(d, col="red", border="blue")
dp<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
?abline
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
m5<-mean(happy5)
m15<-mean(happy15)
m25<-mean(happy25)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext("m5", side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext("Mean",m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(c("mean", m5) side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(m5, pos=4, col="red")
?legend
?text
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="red")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
text(x=90,y=.05, m15, pos=4, col="black", font=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
text(x=90,y=.05, m25, pos=4, col="black", font=2)
par(mfrow=c(1,3))
hist(happy5)
hist(happy15)
hist(happy25)
#http://www.statmethods.net/graphs/density.html
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
text(x=87,y=.05, m15, pos=4, col="black", font=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
text(x=85,y=.08, m25, pos=4, col="black", font=2)
m5<-round(mean(happy5), digits = 2)
m15<-round(mean(happy15), digits = 2)
m25<-round(mean(happy25), digits = 2)
m5
m15
m25
(m5+m15+m25)/3
sd(happy5)/sqrt(5)
round(sd(happy5)/sqrt(5), digits = 2)
round(sd(happy15)/sqrt(15), digits = 2)
round(sd(happy25)/sqrt(25), digits = 2)
ean(happy25)
sd(happy25)
mean(happy25)
sd(happy25)
round(sd(survey$happy)/sqrt(5), digits = 2)
#3c) According to the Central Limit Theorem, what should be the standard error for the sampling distribution of n=15? (round to 2 decimal places).
round(sd(survey$happy)/sqrt(15), digits = 2)
#3d) According to the Central Limit Theorem, what should be the standard error for the sampling distribution of n=25? (round to 2 decimal places).
round(sd(survey$happy)/sqrt(25), digits = 2)
mean(happy5)
mean(survey$happy)
round(mean(survey$happy), digits = 2)
mean(survey$happy)
sd(survey$happy)
hist(survey$happy)
survey<-read.csv("StudentSurvey.csv", sep=",",na.strings="?", header=T,  stringsAsFactors=FALSE)
str(survey)
library(dplyr)
dim(survey)
hist(survey$austin)
round(mean(survey$austin), digits = 2)
round(sd(survey$austin), digits = 2)
# Compare to the std dev predicted by the CTL.
sd(survey$austin/sqrt(10)
)
austin10 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$austin, size =10)
austin10[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(austin10)
# Calculate the mean and sd of the sampling distribution.
mean(austin10)
sd(austin10)
sd(survey$austin/sqrt(10))
round(sd(survey$austin/sqrt(10)), digits = 2)
round(mean(survey$austin), digits = 2)
mean(austin10)
sd(austin10)
round(sd(survey$austin/sqrt(10)), digits = 2)
round(mean(survey$austin), digits = 2)
1/sqrt(64)
(.80-1/.125)
(.80-1)/.125
6.28-3.08/.40
(6.28-3.08)/.40
3.28-3.08
3.2-3.08
3.08+.12
(3.2-3.08)/40
round(0.6179, digits = 3)
93-82
11/7
1-pnorm(zscore)
round(1-pnorm(zscore), digits = 3)
round(4.59-6.7/1.1, digits = 2)
zscore<- (4.5 - 6.7)/1.1
round(1-pnorm(zscore), digits = 3)
zscore<-(3.2-3.08)/.40
round(1-pnorm(zscore), digits = 3)
zscore2<-(77-74)/13
round(1-pnorm(zscore2), digits = 3)
zscore2<-(77-74)/13
round(1-pnorm(zscore2), digits = 3)
```{r}
bull<-read.csv("BullRiders.csv")
new_bull <- bull[bull$Events13  > 0 ,]
hist(new_bull$Top10_13)
plot(new_bull$Rides13,new_bull$Top10_13)
abline(lm(new_bull$Top10_13~new_bull$Rides13))
cor(new_bull$Rides13,new_bull$Top10_13)
vars <- c("Top10_13", "Rides13")
cor(new_bull[,vars])
round(cor(new_bull[,vars]), digits = 3)
View(bull)
str(bull)
require(RGoogleAnalytics)
install.packages("RGoogleAnalytics")
devtools::install_github("Tatvic/RGoogleAnalytics")
token <- Auth(client.id,client.secret)
require(RGoogleAnalytics)
library(RGoogleAnalytics)
token <- Auth(client.id,client.secret)
token <- Auth("55306401030-06fn296mdemh7n0327htojsesklktd3j.apps.googleusercontent.com","2VBin819ZVVtjOkDXUTGX8o6")
token <- Auth(client.id,client.secret)
?auth
??auth
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
httr
install.packages("httr")
token <- Auth(client.id,client.secret)
library(httr)
new.visitor<-1,232,298
new.visitor<-1232298
customer <- read.csv("~/Documents/R/customer.csv")
View(customer)
vars <-c("revenue", "conversionRate")
round(cor(customer[,vars]), digits = 3)
library(xlsx)
read.xlsx("test.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
test<-read.xlsx("test.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
str(test)
library(dplyr)
filter(test, v2 == 1)
test1<-filter(test, v2 == 1)
View(test1)
test2<-filter(test, v2 > 2)
View(test2)
View(test)
str(test2)
nrow(test)
test$v4<-c("spring", "summer", "fall")
View(test)
test$v4<-c("spring", "summer", "fall", "winter", "happy", "joy", "sad")
View(test)
mean(test$v2)
str(test)
hist(test, v1, v4)
hist(test, v2, v4)
View(test1)
View(test)
class(test$v2)
class(test$v3)
newvector<-test[["v3"]]
class(newvector)
class(testvector)
testvector<-test[["v2"]]
class(testvector)
mean(testvector)
str(test)
as.numeric(as.character(test$v1))
View(test)
vector1<-test[["v1"]]
class(vector1)
as.numeric(as.character(test$v1))
as.numeric(as.character(v1))
as.numeric(as.character(vector1))
class(vector1)
as.numeric(vector1)
vector1
gender <- read.csv("~/Documents/R/gender.csv")
View(gender)
str(gender)
male<-gender[["male"]]
class(male)
mean(gender$male)
mean(gender$female)
library(nycflights13)
dim(flights)
dim(gender)
head(gender)
head(flights)
library(dplyr)
filter[flights$month==6 & flights$day==20,]
filter[flights$month==6 & flights$day==20]
filter(flights, month==6, day==20)
june<-filter(flights, month==6, day==20)
View(june)
filter(flights, month==6, day==20)
tail(june)
select(flights, year, month, day)
View(june)
orig<-select(flights, origin)
View(orig)
dim(flights)
nrow(flights)
distinct(select(flights, tailnum))
summarise(flights,delay = mean(dep_delay, na.rm= TRUE))
str(flights)
duplicated(gender)
View(gender)
gender$salary<-c(132000, 128250, 127500, 120000, 120000, 120000, 116920, 115000, 113000, 106000, 106000)
View(gender)
gender$salary<- NULL
View(gender)
summary(cars)
plot(cars)
employees <- read.csv("http://www.headfirstlabs.com/books/hfda/hfda_ch09_employees.csv",header=TRUE)
str(employees)
View(employees)
mean(employees$received)
hist(employees$received)
hist(employees$received, main = "Frequency of Raises")
hist(employees$received, breaks=50, main = "Frequency of Raises")
sd(employees$received)
summary(employees$received)
summary.data.frame(employees)
dim(employees)
hist(employees$received[employees$year==2007], breaks=50)
hist(employees$received[employees$gender=="F"], breaks=50)
library(xlsx)
read.xlsx("gerd.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
gerd<-read.xlsx("gerd.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
View(gerd)
str(gerd)
library(ggplot2)
,
ggplot(data=gerd, aes(x=pages.session, y=convert.rate))
ggplot(data=gerd, aes(x=convert.rate,y=pages.session))
qplot(data=gerd, y=pages.session, x=convert.rate, geom="point")
qplot(data=gerd, x=pages.session, y=convert.rate, geom="point")
ggplot(data=gerd, aes(y=convert.rate,x=pages.session))+ geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)# Add linear regression line
#  (by default includes 95% confidence region)
# Correlations with significance levels
library(Hmisc)
rcorr(x, type="pearson") # type can be pearson or spearman
#mtcars is a data frame
rcorr(as.matrix(mtcars))
corr<-rcorr(as.matrix(mtcars))
corr
cor(gerd$pages.session,gerd$convert.rate)
?cor
?summary.lm
convertlm<-lm(pages.session ~ convert.rate, data=gerd)
summary(convert.lm)$r.squared
summary(convertlm)$r.squared
study <- read.csv("~/Documents/R/study.csv")
vars <-c("Minutes", "Grade")
View(study)
vars
#correlation matrix
vars <-c("Minutes", "Grade")
round(cor(study[,vars]), digits = 3)
vars<-c("pages.session", "convert.rate")
round(cor(gerd[,vars]), digits = 3)
View(gerd)
str(gerd)
vars<-c("pages.session", "convert.rate")
round(cor(gerd[,vars]), digits = 3)
ggplot(data=gerd, aes(y=convert.rate,x=avg.sess.dur))+ geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)# Add linear regression line
#  (by default includes 95% confidence region)
cor(gerd$avg.sess.dur,gerd$convert.rate)
convertlm<-lm(avg.sess.dur ~ convert.rate, data=gerd)
summary(convertlm)$r.squared
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate))+ geom_point(shape=1) + geom_smooth(method=lm) + geom_quantile(x=avg.sess.dur,y=convert.rate)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate))+ geom_point(shape=1) + geom_smooth(method=lm) + geom_quantile()
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate))+ geom_point(shape=1) + geom_smooth(method=lm)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=class))+ geom_point(shape=1) + geom_smooth(method=lm)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, fill=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm
)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, fill=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_fill_brewer(palette="Spectral")
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2))
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate")
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate") + scale_fill_discrete(name="Average\nSession\nDuration")
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate") + scale_colour_discrete(name="Duration")
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate")
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate") + theme(legend.title = element_text(colour="blue", size=16, face="bold"))
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradient(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate") + theme(legend.title = element_text(colour="blue", size=16, face="bold"))
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, colour=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm) + scale_colour_gradientn(colours=rainbow(2)) + ggtitle("The Relationship Between Average\nSession Duration and Conversion Rate") + theme(legend.title = element_text(colour="blue", size=16, face="bold"))
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate, fill=avg.sess.dur))+ geom_point(shape=1) + geom_smooth(method=lm)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate) + geom_point(shape=1) + geom_smooth(method=lm)
)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate)) + geom_point(shape=1) + geom_smooth(method=lm)
ggplot(data=gerd, aes(x=avg.sess.dur,y=convert.rate)) + geom_point(shape=1) + geom_smooth(method=lm) + scale_fill_gradient( low = "red",high = "yellow")
library(ggvis)
#plot mtcars
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
mtcars
mtcars<-mtcars
str(mtcars)
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()
?pressure
pressure<-pressure
View(pressure)
str(pressure)
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points()
pressure %>% ggvis(~temperature, ~pressure) %>% layer_bars()
pressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature)
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature), size = ~pressure
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature) size = ~ pressure
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature) size = ~pressure
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature) %>% size = ~pressure
faithful %>%
ggvis(~waiting, ~eruptions, opacity := 0.6,
fill = ~factor(round(eruptions)), shape = ~factor(round(eruptions)),
size = ~round(eruptions)) %>%
layer_points() %>%
add_legend(c("fill", "shape", "size"),
title = "~ duration (m)", values = c(2, 3, 4, 5))
#plot mtcars
str(faithful)
pressure %>% ggvis(~temperature, ~pressure, fill = ~factor(round(temperature))) %>% layer_points()
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points(fill = ~temperature)
pressure %>% ggvis(~temperature, ~pressure, fill = ~temperature) %>% layer_points()
pressure %>% ggvis(~temperature, ~pressure, fill = ~temperature, size = ~pressure) %>% layer_points()
