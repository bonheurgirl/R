delay = mean(dep_delay, na.rm = TRUE))
delay = mean(dep_delay, na.rm = TRUE)
summarise(flights,delay = mean(dep_delay, na.rm= TRUE))
nrow(survey)
dim(survey)
slice(survey, 1:10)
n_distinct(survey$name_letters)
filter(survey, name_letters > 5, slice(survey, 1:10))
first10<-slice(survey, 1:10))
first10<-slice(survey, 1:10)
filter(first10, name_letters > 5)
morethan5<-filter(first10, name_letters > 5)
View(morethan5)
nrow(morethan5)
str(survey)
happystud<-filter(survey, happy < 40 )
View(happystud)
slice(happystud, 1)
hist(survey$name_letters)
fivenum(survey$name_letters)
mean(survey$name_letters)
sd(survey$name_letters)
?rep
hist(survey$name_letters)
fivenum(survey$name_letters)
mean(survey$name_letters)
sd(survey$name_letters)
# Draw 1,000 samples of n=5 and find the mean of each sample.
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(2,10))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$name_letters)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(2,10))
mean(xbar15)
sd(xbar15)
sd(survey$name_letters)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(2,10))
mean(xbar25)
sd(xbar25)
sd(survey$name_letters)/sqrt(25)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$age, size =5)
xbar5[i] <- mean(x)}
xbar5
min(xbar5)
mean(round(survey$name_letters), digits = 2)
mean(survey$name_letters)
round(mean(survey$name_letters), digits = 2)
?sd
round(sd(survey$name_letters), digits = 2)
mean(xbar5)
mean(xbar15)
mean(xbar25)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
sd(xbar15)
sd(xbar25)
sd(xbar5)
mean(xbar5)
mean(xbar15)
mean(xbar25)
mean(xbar5)
mean(xbar15)
mean(xbar25)
?prop.table
sd(xbar5)
sd(xbar15)
sd(xbar25)
sd(xbar5)
sd(survey$name_letters)/sqrt(5)
sd(xbar5)/sqrt(5)
round(sd(xbar5)/sqrt(5), digits = 2)
sd(survey$name_letters)/sqrt(5)
sd(survey$name_letters)/sqrt(15)
sd(survey$name_letters)/sqrt(25)
round(sd(survey$name_letters)/sqrt(5), digits = 3)
round(sd(survey$name_letters)/sqrt(15), digits = 3)
round(sd(survey$name_letters)/sqrt(25), digits = 3)
confint(xbar5, xbar15, xbar25, level=.95)
mean(xbar5) + mean(xbar15) + mean(xbar25)
round(mean(xbar5) + mean(xbar15) + mean(xbar25), digits = 2)
round(mean(mean(xbar5) + mean(xbar15) + mean(xbar25)), digits = 2)
mean(mean(xbar5)+mean(xbar15)+mean(xbar25))
mean(xbar5)
(mean(xbar5) + mean(xbar15) + mean(xbar25))/3
round((mean(xbar5) + mean(xbar15) + mean(xbar25))/3, digits = 2)
74-13
beats<-(c(74,70,78,77,61,87))
mean(survey$name_letters)
sd(survey$name_letters)
hist(survey$name_letters)
mean(xbar5)
mean(xbar15)
mean(xbar25)
13/sqrt(36)
74-13
61/sqrt(36)
13/sqrt(36)
77-73
round(4/sd(77), digits = 2)
round(4/13, digits = 2)
hist(survey$happy)
fivenum(survey$happy)
mean(survey$happy)
sd(survey$happy)
round(sd(survey$happy), digits = 1)
happy5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =5)
happy5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy5)
sd(happy5)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(5)
hist(survey$happy)
#n=15
happy15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =15)
happy15[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy15)
# Calculate the mean and sd of the sampling distribution.
mean(happy15)
sd(happy15)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(15)
mean(happy5)
mean(happy15)
mean(happy25)
#n=25
happy25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =25)
happy25[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(happy25)
# Calculate the mean and sd of the sampling distribution.
mean(happy25)
sd(happy25)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(25)
mean(happy5)
mean(happy15)
mean(happy25)
sd(happy5)
sd(happy15)
sd(happy25)
par(mfrow=c(1,3))
hist(happy5)
hist(happy15)
hist(happy25)
dp<-density(happy5)
plot(dp, main="Happy5")
polygon(d, col="red", border="blue")
dp<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
?abline
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
m5<-mean(happy5)
m15<-mean(happy15)
m25<-mean(happy25)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext("m5", side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext("Mean",m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(c("mean", m5) side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
mtext(m5, side = 4, adj = 1)
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(m5, pos=4, col="red")
?legend
?text
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="red")
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
text(x=90,y=.05, m15, pos=4, col="black", font=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
text(x=90,y=.05, m25, pos=4, col="black", font=2)
par(mfrow=c(1,3))
hist(happy5)
hist(happy15)
hist(happy25)
#http://www.statmethods.net/graphs/density.html
par(mfrow=c(3,1))
dph5<-density(happy5)
plot(dp, main="Happy5")
polygon(dp, col="red", border="blue")
abline(v=m5, col="black", lwd=2)
text(x=90,y=.05, m5, pos=4, col="black", font=2)
dph15<-density(happy15)
plot(dph15, main="Happy15")
polygon(dph15, col="green", border="blue")
abline(v=m15, col="black", lwd=2)
text(x=87,y=.05, m15, pos=4, col="black", font=2)
dph25<-density(happy25)
plot(dph25, main="Happy25")
polygon(dph25, col="yellow", border="blue")
abline(v=m25, col="black", lwd=2)
text(x=85,y=.08, m25, pos=4, col="black", font=2)
m5<-round(mean(happy5), digits = 2)
m15<-round(mean(happy15), digits = 2)
m25<-round(mean(happy25), digits = 2)
m5
m15
m25
(m5+m15+m25)/3
sd(happy5)/sqrt(5)
round(sd(happy5)/sqrt(5), digits = 2)
round(sd(happy15)/sqrt(15), digits = 2)
round(sd(happy25)/sqrt(25), digits = 2)
ean(happy25)
sd(happy25)
mean(happy25)
sd(happy25)
round(sd(survey$happy)/sqrt(5), digits = 2)
#3c) According to the Central Limit Theorem, what should be the standard error for the sampling distribution of n=15? (round to 2 decimal places).
round(sd(survey$happy)/sqrt(15), digits = 2)
#3d) According to the Central Limit Theorem, what should be the standard error for the sampling distribution of n=25? (round to 2 decimal places).
round(sd(survey$happy)/sqrt(25), digits = 2)
mean(happy5)
mean(survey$happy)
round(mean(survey$happy), digits = 2)
mean(survey$happy)
sd(survey$happy)
hist(survey$happy)
survey<-read.csv("StudentSurvey.csv", sep=",",na.strings="?", header=T,  stringsAsFactors=FALSE)
str(survey)
library(dplyr)
dim(survey)
hist(survey$austin)
round(mean(survey$austin), digits = 2)
round(sd(survey$austin), digits = 2)
# Compare to the std dev predicted by the CTL.
sd(survey$austin/sqrt(10)
)
austin10 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$austin, size =10)
austin10[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(austin10)
# Calculate the mean and sd of the sampling distribution.
mean(austin10)
sd(austin10)
sd(survey$austin/sqrt(10))
round(sd(survey$austin/sqrt(10)), digits = 2)
round(mean(survey$austin), digits = 2)
mean(austin10)
sd(austin10)
round(sd(survey$austin/sqrt(10)), digits = 2)
round(mean(survey$austin), digits = 2)
1/sqrt(64)
(.80-1/.125)
(.80-1)/.125
6.28-3.08/.40
(6.28-3.08)/.40
3.28-3.08
3.2-3.08
3.08+.12
(3.2-3.08)/40
round(0.6179, digits = 3)
93-82
11/7
1-pnorm(zscore)
round(1-pnorm(zscore), digits = 3)
round(4.59-6.7/1.1, digits = 2)
zscore<- (4.5 - 6.7)/1.1
round(1-pnorm(zscore), digits = 3)
zscore<-(3.2-3.08)/.40
round(1-pnorm(zscore), digits = 3)
zscore2<-(77-74)/13
round(1-pnorm(zscore2), digits = 3)
zscore2<-(77-74)/13
round(1-pnorm(zscore2), digits = 3)
```{r}
bull<-read.csv("BullRiders.csv")
new_bull <- bull[bull$Events13  > 0 ,]
hist(new_bull$Top10_13)
plot(new_bull$Rides13,new_bull$Top10_13)
abline(lm(new_bull$Top10_13~new_bull$Rides13))
cor(new_bull$Rides13,new_bull$Top10_13)
vars <- c("Top10_13", "Rides13")
cor(new_bull[,vars])
round(cor(new_bull[,vars]), digits = 3)
View(bull)
str(bull)
require(RGoogleAnalytics)
install.packages("RGoogleAnalytics")
devtools::install_github("Tatvic/RGoogleAnalytics")
token <- Auth(client.id,client.secret)
require(RGoogleAnalytics)
library(RGoogleAnalytics)
token <- Auth(client.id,client.secret)
token <- Auth("55306401030-06fn296mdemh7n0327htojsesklktd3j.apps.googleusercontent.com","2VBin819ZVVtjOkDXUTGX8o6")
token <- Auth(client.id,client.secret)
?auth
??auth
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
httr
install.packages("httr")
token <- Auth(client.id,client.secret)
library(httr)
new.visitor<-1,232,298
new.visitor<-1232298
customer <- read.csv("~/Documents/R/customer.csv")
View(customer)
vars <-c("revenue", "conversionRate")
round(cor(customer[,vars]), digits = 3)
library(xlsx)
read.xlsx("test.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
test<-read.xlsx("test.xlsx", sheetIndex=1, header=TRUE, colClasses=NA)
str(test)
library(dplyr)
filter(test, v2 == 1)
test1<-filter(test, v2 == 1)
View(test1)
test2<-filter(test, v2 > 2)
View(test2)
View(test)
str(test2)
nrow(test)
test$v4<-c("spring", "summer", "fall")
View(test)
test$v4<-c("spring", "summer", "fall", "winter", "happy", "joy", "sad")
View(test)
mean(test$v2)
str(test)
hist(test, v1, v4)
hist(test, v2, v4)
View(test1)
View(test)
class(test$v2)
class(test$v3)
newvector<-test[["v3"]]
class(newvector)
class(testvector)
testvector<-test[["v2"]]
class(testvector)
mean(testvector)
str(test)
as.numeric(as.character(test$v1))
View(test)
vector1<-test[["v1"]]
class(vector1)
as.numeric(as.character(test$v1))
as.numeric(as.character(v1))
as.numeric(as.character(vector1))
class(vector1)
as.numeric(vector1)
vector1
gender <- read.csv("~/Documents/R/gender.csv")
View(gender)
str(gender)
male<-gender[["male"]]
class(male)
mean(gender$male)
mean(gender$female)
library(nycflights13)
dim(flights)
dim(gender)
head(gender)
head(flights)
library(dplyr)
filter[flights$month==6 & flights$day==20,]
filter[flights$month==6 & flights$day==20]
filter(flights, month==6, day==20)
june<-filter(flights, month==6, day==20)
View(june)
filter(flights, month==6, day==20)
tail(june)
select(flights, year, month, day)
View(june)
orig<-select(flights, origin)
View(orig)
dim(flights)
nrow(flights)
distinct(select(flights, tailnum))
summarise(flights,delay = mean(dep_delay, na.rm= TRUE))
str(flights)
duplicated(gender)
View(gender)
gender$salary<-c(132000, 128250, 127500, 120000, 120000, 120000, 116920, 115000, 113000, 106000, 106000)
View(gender)
gender$salary<- NULL
View(gender)
